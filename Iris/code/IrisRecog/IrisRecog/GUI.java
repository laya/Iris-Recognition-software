package IrisRecog;/** * GUI.java * */import java.awt.*;import java.awt.event.*;import javax.swing.*;import javax.swing.filechooser.*;import javax.swing.event.*;import javax.swing.border.*;import java.util.*;import java.lang.*;import java.io.File;public class GUI extends JFrame{	/* Menu Bar */	protected JMenuBar mbr_Main;	/* Menus */	protected GUIMenu mnu_File, mnu_Actions, mnu_View, mnu_Help;	/* Menu Items */	protected GUIMenuItem itm_Exit, itm_About, itm_ScanIntoMemory, itm_ScanAgainstMemory, itm_ViewMemory,    					  itm_LoadAgent, itm_SaveMemory;	/* Image File Chooser */	protected ImageFileChooser fch_fileChooser;	/* File Chooser */	protected AgentFileChooser fch_agentFileChooser;	/* Dialogs */	protected JDialog dlg_About, dlg_Memory, dlg_Progress;	/* Custom Panels */	protected GUIPanel pnl_AboutNorth, pnl_AboutCenter, pnl_AboutSouth, pnl_AboutEye,					   pnl_AboutInfo, pnl_AboutNorthInner, pnl_North, pnl_South, pnl_NorthInner,					   pnl_Step1, pnl_Step2, pnl_Step3, pnl_Step1Label, pnl_Step2Label, pnl_Step3Label,					   pnl_Center, pnl_Step4, pnl_Step4Label, pnl_NorthRow1, pnl_NorthRow2, pnl_Step5Label,					   pnl_Step5, pnl_Step6Label, pnl_Step6, pnl_Step7, pnl_Unwrapped, pnl_MemoryNorth,					   pnl_MemoryCenter, pnl_MemorySouth, pnl_MemoryStat, pnl_Memory, pnl_Main, pnl_Options,					   pnl_PupilCenterDetectionOptions, pnl_EdgeDetectionOptions, pnl_East, pnl_EdgeThreshhold,					   pnl_PupilCenterDetectionLabels, pnl_PupilCenterDetectionSliders, pnl_PupilCenterDetectionValues,					   pnl_EdgeDetectionLabels, pnl_EdgeDetectionSliders, pnl_EdgeDetectionValues, pnl_ProgressNorth,					   pnl_ProgressCenter, pnl_RadiusDetectionOptions, pnl_RadiusDetectionLabels, pnl_RadiusDetectionValues,					   pnl_RadiusDetectionSliders, pnl_NorthRow3, pnl_Step7Label, pnl_Step8, pnl_Step8Label;	/* Image Panel */	protected ImagePanel pnl_OriginalImage, pnl_GrayscaleImage, pnl_GrayscaleMedianFilterImageWithCenter, pnl_EdgeImage,					     pnl_EdgeImageWithRadii, pnl_GrayscaleIrisOnly, pnl_GrayscaleMedianFilterImage, pnl_UnwrappedIris;	/* Panels */	protected JPanel pnl_ContentPane;	/* Buttons */	protected JButton btn_AboutOkay, btn_MemoryOkay, btn_Clear;	/* Text Area */	protected JTextArea jta_AboutInfo, jta_Memory;	/* Labels */	protected GUILabel lbl_AboutEye, lbl_AboutTeam, lbl_AboutTeamMembers, lbl_Step1, lbl_Step2, lbl_Step3,					   lbl_Step1Step2Arrow, lbl_Step4, lbl_Step5, lbl_Step6, lbl_Unwrapped, lbl_MemoryStat,					   lbl_PupilCenterDetectionOptionsLabel, lbl_EdgeDetectionOptionsLabel, lbl_PupilPercentMatch,					   lbl_PupilVariance, lbl_EdgeThreshhold, lbl_EdgeGaussianWidth, lbl_RadiusCirclePercentMatch,					   lbl_PupilRadiusMatchWeight, lbl_PupilCenterDistanceWeight, lbl_Step7, lbl_Step8;	/* Sliders */	protected JSlider sld_PupilBlockSizePortion, sld_PupilVariance, sld_EdgeThreshold, sld_EdgeGaussianWidth,				      sld_RadiusCirclePercentMatch, sld_PupilRadiusMatchWeight, sld_PupilCenterDistanceWeight;	protected JTextField jtf_PupilThreshhold, jtf_BlockSizePortion, jtf_EdgeThreshhold, jtf_EdgeGaussianWidth,						 jtf_RadiusCirclePercentMatch, jtf_PupilRadiusMatchWeight, jtf_PupilCenterDistanceWeight;	protected IrisRecog model;	/**	 * Constructor creates and initializes the components of the user interface.	 */	public GUI()	{		super("Iris Recognition");		/* Setup the file choosers */		fch_fileChooser = new ImageFileChooser();		fch_agentFileChooser = new AgentFileChooser();		createMenu();		createLayout();		createDialogs();		/* Clear the image panels */		clear();		/* Setup window properties */		this.addWindowListener(new WindowAdapter()								{									public void windowClosing(WindowEvent e)									{										close();									}								});		this.setResizable(false);		this.setJMenuBar(mbr_Main);		this.setSize(800,600);   //new Dimension(Constants.INT_APPLICATION_WINDOW_WIDTH, Constants.INT_APPLICATION_WINDOW_HEIGHT));		//this.setLocationRelativeTo(null);		this.setVisible(true);	}	/**	 * Associates the IrisRecog object as the model for this user interface.	 *	 * @param r The model to be associated with this user interface	 */	public void setModel(IrisRecog r)	{		this.model = r;	}	/**	 * Creates the main menu bar, the menus and the subsequent menu items.	 */	protected void createMenu()	{		/* Menu Bar */		mbr_Main = new JMenuBar();			/* File Menu */			mnu_File = new GUIMenu("File");				/* Load Agent */				itm_LoadAgent = new GUIMenuItem("Load Agent ...");				itm_LoadAgent.addActionListener(new ActionListener()											{												public void actionPerformed(ActionEvent e)												{													loadAgent();												}											});				itm_LoadAgent.setEnabled(true);				/* Exit */				itm_Exit = new GUIMenuItem("Exit");				itm_Exit.addActionListener(new ActionListener()											{												public void actionPerformed(ActionEvent e)												{													close();												}											});			mnu_File.add(itm_LoadAgent);			mnu_File.add(itm_Exit);			/* Actions menu */			mnu_Actions = new GUIMenu("Actions");				/* Scan Eye To Database */				itm_ScanIntoMemory = new GUIMenuItem("Scan An Eye Into My Memory ...");				itm_ScanIntoMemory.addActionListener(new ActionListener()													{														public void actionPerformed(ActionEvent e)														{															scanEye();														}													});				/* Scan Eye For Match */				itm_ScanAgainstMemory = new GUIMenuItem("Match Your Eye Against My Memory ...");				itm_ScanAgainstMemory.addActionListener(new ActionListener()														{															public void actionPerformed(ActionEvent e)															{																matchAgaintMemory();															}														});				/* Save Memory */				itm_SaveMemory = new GUIMenuItem("Save My Memory ...");				itm_SaveMemory.addActionListener(new ActionListener()														{															public void actionPerformed(ActionEvent e)															{																saveAgent();															}														});			mnu_Actions.add(itm_ScanIntoMemory);			mnu_Actions.add(itm_ScanAgainstMemory);			mnu_Actions.add(itm_SaveMemory);			/* View menu */			mnu_View = new GUIMenu("View");				/* View Database Identities */				itm_ViewMemory = new GUIMenuItem("My Memory (Stored Identities) ...");				itm_ViewMemory.addActionListener(new ActionListener()												{													public void actionPerformed(ActionEvent e)													{														viewMemory();													}												});			mnu_View.add(itm_ViewMemory);			/* Help Menu */			mnu_Help = new GUIMenu("Help");				/* About */				itm_About = new GUIMenuItem("About Us ...");				itm_About.addActionListener(new ActionListener()											{												public void actionPerformed(ActionEvent e)												{													dlg_About.setVisible(true);												}											});			mnu_Help.add(itm_About);		mbr_Main.add(mnu_File);		mbr_Main.add(mnu_Actions);		mbr_Main.add(mnu_View);		mbr_Main.add(mnu_Help);		mbr_Main.setBackground(Constants.CLR_DEFAULT_BACKGROUND);	}	/**	 * Creates the components, sets the layout, and adds them to the frame	 */	protected void createLayout()	{		/* Content Pane */		pnl_ContentPane = (JPanel)this.getContentPane();		pnl_ContentPane.setLayout(new BorderLayout());			/* Main Panel */			pnl_Main = new GUIPanel();			pnl_Main.setLayout(new BoxLayout(pnl_Main, BoxLayout.Y_AXIS));				/* North panel */				pnl_North = new GUIPanel();				pnl_North.setPreferredSize(new Dimension(Constants.INT_APPLICATION_WINDOW_WIDTH, (int)(Constants.INT_APPLICATION_WINDOW_HEIGHT * .60)));				pnl_North.setLayout(new BoxLayout(pnl_North, BoxLayout.Y_AXIS));					/* North first row panel */					pnl_NorthRow1 = new GUIPanel();					pnl_NorthRow1.setPreferredSize(new Dimension(Constants.INT_APPLICATION_WINDOW_WIDTH, 200));					pnl_NorthRow1.setLayout(new BoxLayout(pnl_NorthRow1, BoxLayout.X_AXIS));						/* Step 1 Panel */						pnl_Step1 = new GUIPanel();						pnl_Step1.setLayout(new BoxLayout(pnl_Step1, BoxLayout.Y_AXIS));							/* Step 1 Panel Labe */							pnl_Step1Label = new GUIPanel();							pnl_Step1Label.setLayout(new FlowLayout(FlowLayout.CENTER));								/* Step 1 Label */								lbl_Step1 = new GUILabel("Step 1: Scan Eye", SwingConstants.LEFT);							pnl_Step1Label.add(lbl_Step1);							/* Original Image Panel */							pnl_OriginalImage = new ImagePanel();							pnl_OriginalImage.setPreferredSize(new Dimension(200,180));						pnl_Step1.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_Step1.add(pnl_Step1Label);						pnl_Step1.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_Step1.add(pnl_OriginalImage);						/* Step 2 Panel */						pnl_Step2 = new GUIPanel();						pnl_Step2.setLayout(new BoxLayout(pnl_Step2, BoxLayout.Y_AXIS));							/* Step 2 Panel Labe */							pnl_Step2Label = new GUIPanel();							pnl_Step2Label.setLayout(new FlowLayout(FlowLayout.CENTER));								/* Step 2 Label */								lbl_Step2 = new GUILabel("Step 2: Grayscale Eye", SwingConstants.LEFT);							pnl_Step2Label.add(lbl_Step2);							/* Grayscale Image Panel */							pnl_GrayscaleImage = new ImagePanel();							pnl_GrayscaleImage.setPreferredSize(new Dimension(200,180));						pnl_Step2.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_Step2.add(pnl_Step2Label);						pnl_Step2.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_Step2.add(pnl_GrayscaleImage);						/* Step 3 Panel */						pnl_Step3 = new GUIPanel();						pnl_Step3.setLayout(new BoxLayout(pnl_Step3, BoxLayout.Y_AXIS));							/* Step 3 Panel Label */							pnl_Step3Label = new GUIPanel();							pnl_Step3Label.setLayout(new FlowLayout(FlowLayout.CENTER));								/* Step 3 Label */								lbl_Step3 = new GUILabel("Step 3: Median Filter", SwingConstants.LEFT);							pnl_Step3Label.add(lbl_Step3);							/* Grayscale Image Panel */							pnl_GrayscaleMedianFilterImage = new ImagePanel();							pnl_GrayscaleMedianFilterImage.setPreferredSize(new Dimension(200,180));						pnl_Step3.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_Step3.add(pnl_Step3Label);						pnl_Step3.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_Step3.add(pnl_GrayscaleMedianFilterImage);					pnl_NorthRow1.add(Box.createHorizontalStrut(Constants.INT_MEDIUM_GAP));					pnl_NorthRow1.add(pnl_Step1);					pnl_NorthRow1.add(Box.createHorizontalStrut(Constants.INT_LARGE_GAP));					pnl_NorthRow1.add(pnl_Step2);					pnl_NorthRow1.add(Box.createHorizontalStrut(Constants.INT_LARGE_GAP));					pnl_NorthRow1.add(pnl_Step3);					pnl_NorthRow1.add(Box.createHorizontalStrut(Constants.INT_MEDIUM_GAP));					/* North second row panel */					pnl_NorthRow2 = new GUIPanel();					pnl_NorthRow2.setPreferredSize(new Dimension(Constants.INT_APPLICATION_WINDOW_WIDTH, 200));					pnl_NorthRow2.setLayout(new BoxLayout(pnl_NorthRow2, BoxLayout.X_AXIS));						/* Step 4 Panel */						pnl_Step4 = new GUIPanel();						pnl_Step4.setLayout(new BoxLayout(pnl_Step4, BoxLayout.Y_AXIS));							/* Step 4 Panel Label */							pnl_Step4Label = new GUIPanel();							pnl_Step4Label.setLayout(new FlowLayout(FlowLayout.CENTER));								/* Step 4 Label */								lbl_Step4 = new GUILabel("Step 4: Pupil Center Detection", SwingConstants.LEFT);							pnl_Step4Label.add(lbl_Step4);							/* Grayscale Image Panel */							pnl_GrayscaleMedianFilterImageWithCenter = new ImagePanel();							pnl_GrayscaleMedianFilterImageWithCenter.setPreferredSize(new Dimension(200,180));						pnl_Step4.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_Step4.add(pnl_Step4Label);						pnl_Step4.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_Step4.add(pnl_GrayscaleMedianFilterImageWithCenter);						/* Step 5 Panel */						pnl_Step5 = new GUIPanel();						pnl_Step5.setLayout(new BoxLayout(pnl_Step5, BoxLayout.Y_AXIS));							/* Step 5 Panel Label */							pnl_Step5Label = new GUIPanel();							pnl_Step5Label.setLayout(new FlowLayout(FlowLayout.CENTER));								/* Step 5 Label */								lbl_Step5 = new GUILabel("Step 5: Canny Edge Detection", SwingConstants.LEFT);							pnl_Step5Label.add(lbl_Step5);							/* Grayscale Image Panel */							pnl_EdgeImage = new ImagePanel();							pnl_EdgeImage.setPreferredSize(new Dimension(200,180));						pnl_Step5.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_Step5.add(pnl_Step5Label);						pnl_Step5.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_Step5.add(pnl_EdgeImage);						/* Step 6 Panel */						pnl_Step6 = new GUIPanel();						pnl_Step6.setLayout(new BoxLayout(pnl_Step6, BoxLayout.Y_AXIS));							/* Step 6 Panel Label */							pnl_Step6Label = new GUIPanel();							pnl_Step6Label.setLayout(new FlowLayout(FlowLayout.CENTER));								/* Step 6 Label */								lbl_Step6 = new GUILabel("Step 6: Pupil/Iris Radius Detection", SwingConstants.LEFT);							pnl_Step6Label.add(lbl_Step6);							/* Grayscale Image With Edges Panel */							pnl_EdgeImageWithRadii = new ImagePanel();							pnl_EdgeImageWithRadii.setPreferredSize(new Dimension(200,180));						pnl_Step6.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_Step6.add(pnl_Step6Label);						pnl_Step6.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_Step6.add(pnl_EdgeImageWithRadii);					pnl_NorthRow2.add(Box.createHorizontalStrut(Constants.INT_MEDIUM_GAP));					pnl_NorthRow2.add(pnl_Step4);					pnl_NorthRow2.add(Box.createHorizontalStrut(Constants.INT_LARGE_GAP));					pnl_NorthRow2.add(pnl_Step5);					pnl_NorthRow2.add(Box.createHorizontalStrut(Constants.INT_LARGE_GAP));					pnl_NorthRow2.add(pnl_Step6);					pnl_NorthRow2.add(Box.createHorizontalStrut(Constants.INT_MEDIUM_GAP));					/* North Row 3 Panel */					pnl_NorthRow3 = new GUIPanel();					pnl_NorthRow3.setPreferredSize(new Dimension(Constants.INT_APPLICATION_WINDOW_WIDTH, 200));					pnl_NorthRow3.setLayout(new BoxLayout(pnl_NorthRow3, BoxLayout.X_AXIS));						/* Step 7 Panel */						pnl_Step7 = new GUIPanel();						pnl_Step7.setLayout(new BoxLayout(pnl_Step7, BoxLayout.Y_AXIS));							/* Step 7 Panel Label */							pnl_Step7Label = new GUIPanel();							pnl_Step7Label.setLayout(new FlowLayout(FlowLayout.CENTER));								/* Step 7 Label */								lbl_Step7 = new GUILabel("Step 7: Iris Localization", SwingConstants.LEFT);							pnl_Step7Label.add(lbl_Step7);							/* Grayscale Iris Only panel */							pnl_GrayscaleIrisOnly = new ImagePanel();							pnl_GrayscaleIrisOnly.setPreferredSize(new Dimension(200,180));						pnl_Step7.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_Step7.add(pnl_Step7Label);						pnl_Step7.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_Step7.add(pnl_GrayscaleIrisOnly);						/* Step 8 Panel */						pnl_Step8 = new GUIPanel();						pnl_Step8.setPreferredSize(new Dimension(435, 180));							/* Step 8 Label Panel */							pnl_Step8Label = new GUIPanel();							pnl_Step8Label.setLayout(new FlowLayout(FlowLayout.CENTER));								/* Step 8 Label */								lbl_Step8 = new GUILabel("Step 8: Iris Unrolling (Unwrapping)", SwingConstants.LEFT);							pnl_Step8Label.add(lbl_Step8);							/* Unwrapped Image Panel */							pnl_Unwrapped = new GUIPanel();							pnl_Unwrapped.setLayout(new BoxLayout(pnl_Unwrapped, BoxLayout.X_AXIS));								/* Unwrapped Image Panel */								pnl_UnwrappedIris = new ImagePanel();								pnl_UnwrappedIris.setPreferredSize(new Dimension(435, 55));							pnl_Unwrapped.add(Box.createVerticalStrut(Constants.INT_MEDIUM_GAP));							pnl_Unwrapped.add(pnl_UnwrappedIris);							pnl_Unwrapped.add(Box.createVerticalStrut(Constants.INT_MEDIUM_GAP));						pnl_Step8.add(Box.createVerticalStrut(Constants.INT_MEDIUM_GAP));						pnl_Step8.add(pnl_Step8Label);						pnl_Step8.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_Step8.add(pnl_Unwrapped);					pnl_NorthRow3.add(Box.createHorizontalStrut(Constants.INT_MEDIUM_GAP));					pnl_NorthRow3.add(pnl_Step7);					pnl_NorthRow3.add(Box.createHorizontalStrut(Constants.INT_LARGE_GAP));					pnl_NorthRow3.add(pnl_Step8);					pnl_NorthRow3.add(Box.createHorizontalStrut(Constants.INT_MEDIUM_GAP));				pnl_North.add(pnl_NorthRow1);				pnl_North.add(pnl_NorthRow2);				pnl_North.add(pnl_NorthRow3);			pnl_Main.add(pnl_North);			pnl_Main.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));			/* East panel */			pnl_East = new GUIPanel();			pnl_East.setLayout(new BoxLayout(pnl_East, BoxLayout.X_AXIS));				/* Options Panel */				pnl_Options = new GUIPanel();				pnl_Options.setLayout(new BoxLayout(pnl_Options, BoxLayout.Y_AXIS));					/* Pupil Center Detection Option Panel */					pnl_PupilCenterDetectionOptions = new GUIPanel();					pnl_PupilCenterDetectionOptions.setPreferredSize(new Dimension(300, 380));					pnl_PupilCenterDetectionOptions.setLayout(new BoxLayout(pnl_PupilCenterDetectionOptions, BoxLayout.X_AXIS));					pnl_PupilCenterDetectionOptions.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED), " Pupil Center Detection Options ", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION));						/* Pupil Center Detection labels */						pnl_PupilCenterDetectionLabels = new GUIPanel();						pnl_PupilCenterDetectionLabels.setLayout(new BoxLayout(pnl_PupilCenterDetectionLabels, BoxLayout.Y_AXIS));							/* Pupil Variance Label */							lbl_PupilVariance = new GUILabel("Variance ", SwingConstants.LEFT);							/* Pupil Area Percent Match Label */							lbl_PupilPercentMatch = new GUILabel("Block Size % ", SwingConstants.LEFT);						pnl_PupilCenterDetectionLabels.add(lbl_PupilVariance);						pnl_PupilCenterDetectionLabels.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_PupilCenterDetectionLabels.add(lbl_PupilPercentMatch);						/* Pupil Center Detection Sliders */						pnl_PupilCenterDetectionSliders = new GUIPanel();						pnl_PupilCenterDetectionSliders.setLayout(new BoxLayout(pnl_PupilCenterDetectionSliders, BoxLayout.Y_AXIS));							/* Pupil Variance Slidder */							sld_PupilVariance = new JSlider(1, 50);							sld_PupilVariance.setValue(Globals.PUPIL_VARIANCE);							sld_PupilVariance.addChangeListener(new ChangeListener()																{																	public void stateChanged(ChangeEvent e)																	{																		jtf_PupilThreshhold.setText((new Integer(sld_PupilVariance.getValue())).toString());																		Globals.PUPIL_VARIANCE = sld_PupilVariance.getValue();																	}																});							sld_PupilVariance.addMouseListener(new MouseAdapter()																{																	public void mouseReleased(MouseEvent e)																	{																		rescanEye();																	}																});							/* Pupil Area Percent Slider */							sld_PupilBlockSizePortion = new JSlider(0, 100);							sld_PupilBlockSizePortion.setValue((int)(Globals.PUPIL_BLOCK_SIZE_PORTION * 100));							sld_PupilBlockSizePortion.addChangeListener(new ChangeListener()																{																	public void stateChanged(ChangeEvent e)																	{																		jtf_BlockSizePortion.setText((new Integer(sld_PupilBlockSizePortion.getValue())).toString() + "%");																		Globals.PUPIL_BLOCK_SIZE_PORTION = (new Double(sld_PupilBlockSizePortion.getValue())).doubleValue() / 100;																	}																});							sld_PupilBlockSizePortion.addMouseListener(new MouseAdapter()																{																	public void mouseReleased(MouseEvent e)																	{																		rescanEye();																	}																});						pnl_PupilCenterDetectionSliders.add(sld_PupilVariance);						pnl_PupilCenterDetectionSliders.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_PupilCenterDetectionSliders.add(sld_PupilBlockSizePortion);						/* Pupil Center Detection Values */						pnl_PupilCenterDetectionValues = new GUIPanel();						pnl_PupilCenterDetectionValues.setLayout(new BoxLayout(pnl_PupilCenterDetectionValues, BoxLayout.Y_AXIS));							/* Variance Text Field */							jtf_PupilThreshhold = new JTextField((new Integer(Globals.PUPIL_VARIANCE)).toString(), 8);							jtf_PupilThreshhold.setEditable(false);							jtf_PupilThreshhold.setHorizontalAlignment(JTextField.CENTER);							/* Block Size Portion Text Field */							jtf_BlockSizePortion = new JTextField((new Integer((int)(Globals.PUPIL_BLOCK_SIZE_PORTION*100))).toString() + "%", 8);							jtf_BlockSizePortion.setEditable(false);							jtf_BlockSizePortion.setHorizontalAlignment(JTextField.CENTER);						pnl_PupilCenterDetectionValues.add(jtf_PupilThreshhold);						pnl_PupilCenterDetectionValues.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_PupilCenterDetectionValues.add(jtf_BlockSizePortion);					pnl_PupilCenterDetectionOptions.add(Box.createHorizontalStrut(Constants.INT_SMALL_GAP));					pnl_PupilCenterDetectionOptions.add(pnl_PupilCenterDetectionLabels);					pnl_PupilCenterDetectionOptions.add(Box.createHorizontalStrut(Constants.INT_SMALL_GAP));					pnl_PupilCenterDetectionOptions.add(pnl_PupilCenterDetectionSliders);					pnl_PupilCenterDetectionOptions.add(Box.createHorizontalStrut(Constants.INT_SMALL_GAP));					pnl_PupilCenterDetectionOptions.add(pnl_PupilCenterDetectionValues);					pnl_PupilCenterDetectionOptions.add(Box.createHorizontalStrut(Constants.INT_SMALL_GAP));					/* Edge Detection Option Panel */					pnl_EdgeDetectionOptions = new GUIPanel();					pnl_EdgeDetectionOptions.setPreferredSize(new Dimension(300, 380));					pnl_EdgeDetectionOptions.setLayout(new BoxLayout(pnl_EdgeDetectionOptions, BoxLayout.X_AXIS));					pnl_EdgeDetectionOptions.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED), " Edge Detection Options ", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION));						/* Edge Detection labels */						pnl_EdgeDetectionLabels = new GUIPanel();						pnl_EdgeDetectionLabels.setLayout(new BoxLayout(pnl_EdgeDetectionLabels, BoxLayout.Y_AXIS));							/* Edge Threshhold */							lbl_EdgeThreshhold = new GUILabel("Threshhold ", SwingConstants.LEFT);							/* Edge Gaussian Width */							lbl_EdgeGaussianWidth = new GUILabel("Gaussian Width ", SwingConstants.LEFT);						pnl_EdgeDetectionLabels.add(lbl_EdgeThreshhold);						pnl_EdgeDetectionLabels.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_EdgeDetectionLabels.add(lbl_EdgeGaussianWidth);						/* Edge Detection sliders */						pnl_EdgeDetectionSliders = new GUIPanel();						pnl_EdgeDetectionSliders.setLayout(new BoxLayout(pnl_EdgeDetectionSliders, BoxLayout.Y_AXIS));							/* Threshhold Slider */							sld_EdgeThreshold = new JSlider(1, 255);							sld_EdgeThreshold.setValue((int)(Globals.EDGE_THRESHHOLD));							sld_EdgeThreshold.addChangeListener(new ChangeListener()																{																	public void stateChanged(ChangeEvent e)																	{																		jtf_EdgeThreshhold.setText((new Integer(sld_EdgeThreshold.getValue())).toString());																		Globals.EDGE_THRESHHOLD = sld_EdgeThreshold.getValue();																	}																});							sld_EdgeThreshold.addMouseListener(new MouseAdapter()																{																	public void mouseReleased(MouseEvent e)																	{																		rescanEye();																	}																});							/* Edge Gaussian Width Slider */							sld_EdgeGaussianWidth = new JSlider(2, 35);							sld_EdgeGaussianWidth.setValue((int)(Globals.GUASSIAN_WIDTH));							sld_EdgeGaussianWidth.addChangeListener(new ChangeListener()																{																	public void stateChanged(ChangeEvent e)																	{																		jtf_EdgeGaussianWidth.setText((new Integer(sld_EdgeGaussianWidth.getValue())).toString());																		Globals.GUASSIAN_WIDTH = sld_EdgeGaussianWidth.getValue();																	}																});							sld_EdgeGaussianWidth.addMouseListener(new MouseAdapter()																{																	public void mouseReleased(MouseEvent e)																	{																		rescanEye();																	}																});						pnl_EdgeDetectionSliders.add(sld_EdgeThreshold);						pnl_EdgeDetectionSliders.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_EdgeDetectionSliders.add(sld_EdgeGaussianWidth);						/* Edge Detection Values */						pnl_EdgeDetectionValues = new GUIPanel();						pnl_EdgeDetectionValues.setLayout(new BoxLayout(pnl_EdgeDetectionValues, BoxLayout.Y_AXIS));								/* Edge Threshhold Text Field */								jtf_EdgeThreshhold = new JTextField((new Integer((int)(Globals.EDGE_THRESHHOLD))).toString(), 10);								jtf_EdgeThreshhold.setEditable(false);								jtf_EdgeThreshhold.setHorizontalAlignment(JTextField.CENTER);								/* Edge Gaussian Width Tect Field */								jtf_EdgeGaussianWidth = new JTextField((new Integer((int)(Globals.GUASSIAN_WIDTH))).toString(), 10);								jtf_EdgeGaussianWidth.setEditable(false);								jtf_EdgeGaussianWidth.setHorizontalAlignment(JTextField.CENTER);						pnl_EdgeDetectionValues.add(jtf_EdgeThreshhold);						pnl_EdgeDetectionValues.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));						pnl_EdgeDetectionValues.add(jtf_EdgeGaussianWidth);					pnl_EdgeDetectionOptions.add(Box.createHorizontalStrut(Constants.INT_SMALL_GAP));					pnl_EdgeDetectionOptions.add(pnl_EdgeDetectionLabels);					pnl_EdgeDetectionOptions.add(Box.createHorizontalStrut(Constants.INT_SMALL_GAP));					pnl_EdgeDetectionOptions.add(pnl_EdgeDetectionSliders);					pnl_EdgeDetectionOptions.add(Box.createHorizontalStrut(Constants.INT_SMALL_GAP));					pnl_EdgeDetectionOptions.add(pnl_EdgeDetectionValues);					pnl_EdgeDetectionOptions.add(Box.createHorizontalStrut(Constants.INT_SMALL_GAP));					/* Radius Detection Option Panel */					pnl_RadiusDetectionOptions = new GUIPanel();					pnl_RadiusDetectionOptions.setPreferredSize(new Dimension(300, 380));					pnl_RadiusDetectionOptions.setLayout(new BoxLayout(pnl_RadiusDetectionOptions, BoxLayout.X_AXIS));					pnl_RadiusDetectionOptions.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED), " Iris / Pupil Radius Detection Options ", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION));						/* Radius Detection labels */						pnl_RadiusDetectionLabels = new GUIPanel();						pnl_RadiusDetectionLabels.setLayout(new BoxLayout(pnl_RadiusDetectionLabels, BoxLayout.Y_AXIS));							/* Radius Circle Percentage */							lbl_RadiusCirclePercentMatch = new GUILabel("% Circle Match ", SwingConstants.LEFT);						pnl_RadiusDetectionLabels.add(lbl_RadiusCirclePercentMatch);						/* Radius Detection sliders */						pnl_RadiusDetectionSliders = new GUIPanel();						pnl_RadiusDetectionSliders.setLayout(new BoxLayout(pnl_RadiusDetectionSliders, BoxLayout.Y_AXIS));							/* Threshhold Slider */							sld_RadiusCirclePercentMatch = new JSlider(1, 100);							sld_RadiusCirclePercentMatch.setValue((int)(Globals.CIRCLE_PERCENT_MATCH*100));							sld_RadiusCirclePercentMatch.addChangeListener(new ChangeListener()																{																	public void stateChanged(ChangeEvent e)																	{																		jtf_RadiusCirclePercentMatch.setText((new Integer((int)(sld_RadiusCirclePercentMatch.getValue()))).toString() + "%");																		Globals.CIRCLE_PERCENT_MATCH = ((double)sld_RadiusCirclePercentMatch.getValue()) / 100;																	}																});							sld_RadiusCirclePercentMatch.addMouseListener(new MouseAdapter()																{																	public void mouseReleased(MouseEvent e)																	{																		rescanEye();																	}																});						pnl_RadiusDetectionSliders.add(sld_RadiusCirclePercentMatch);						/* Radius Detection Values */						pnl_RadiusDetectionValues = new GUIPanel();						pnl_RadiusDetectionValues.setLayout(new BoxLayout(pnl_RadiusDetectionValues, BoxLayout.Y_AXIS));								/* Radius Circle Percent Match Text Field */								jtf_RadiusCirclePercentMatch = new JTextField((new Integer((int)(Globals.CIRCLE_PERCENT_MATCH*100))).toString() + "%", 10);								jtf_RadiusCirclePercentMatch.setEditable(false);								jtf_RadiusCirclePercentMatch.setHorizontalAlignment(JTextField.CENTER);						pnl_RadiusDetectionValues.add(jtf_RadiusCirclePercentMatch);					pnl_RadiusDetectionOptions.add(Box.createHorizontalStrut(Constants.INT_SMALL_GAP));					pnl_RadiusDetectionOptions.add(pnl_RadiusDetectionLabels);					pnl_RadiusDetectionOptions.add(Box.createHorizontalStrut(Constants.INT_SMALL_GAP));					pnl_RadiusDetectionOptions.add(pnl_RadiusDetectionSliders);					pnl_RadiusDetectionOptions.add(Box.createHorizontalStrut(Constants.INT_SMALL_GAP));					pnl_RadiusDetectionOptions.add(pnl_RadiusDetectionValues);					pnl_RadiusDetectionOptions.add(Box.createHorizontalStrut(Constants.INT_SMALL_GAP));				pnl_Options.add(Box.createVerticalStrut(Constants.INT_MEDIUM_GAP));				pnl_Options.add(pnl_PupilCenterDetectionOptions);				pnl_Options.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));				pnl_Options.add(pnl_EdgeDetectionOptions);				pnl_Options.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));				pnl_Options.add(pnl_RadiusDetectionOptions);				pnl_Options.add(Box.createVerticalStrut(400));			pnl_East.add(Box.createHorizontalStrut(Constants.INT_MEDIUM_GAP));			pnl_East.add(pnl_Options);			pnl_East.add(Box.createHorizontalStrut(Constants.INT_MEDIUM_GAP));			/* South Panel */			pnl_South = new GUIPanel();			pnl_South.setLayout(new FlowLayout(FlowLayout.CENTER));				/* Clear button */				btn_Clear = new JButton("Clear");				btn_Clear.addActionListener(new ActionListener()												{													public void actionPerformed(ActionEvent e)													{															clear();													}												});			pnl_South.add(btn_Clear);		/* Add the panels to the content pane */		pnl_ContentPane.add(pnl_Main, BorderLayout.CENTER);		//pnl_ContentPane.add(pnl_East, BorderLayout.EAST);		pnl_ContentPane.add(pnl_South, BorderLayout.SOUTH);	}	/**	 * Creates all of the required dialogs used by the GUI	 */	protected void createDialogs()	{		createAboutDialog();		createMemoryDialog();	}	/**	 * Creates the about dialog that shows the team members and relevant	 * information about the application	 */	protected void createAboutDialog()	{		/* About window */		dlg_About = new JDialog(this, "About Us", true);		dlg_About.getContentPane().setLayout(new BorderLayout());		dlg_About.setSize(new Dimension(500,215));		dlg_About.setLocationRelativeTo(this);		dlg_About.setVisible(false);			/* North panel */			pnl_AboutNorth = new GUIPanel();			pnl_AboutNorth.setLayout(new BoxLayout(pnl_AboutNorth, BoxLayout.X_AXIS));			pnl_AboutNorth.setPreferredSize(new Dimension(300,50));				/* Inner North panel */				pnl_AboutNorthInner = new GUIPanel();				pnl_AboutNorthInner.setLayout(new BoxLayout(pnl_AboutNorthInner, BoxLayout.Y_AXIS));					/* Team label */					lbl_AboutTeam = new GUILabel("Developers", SwingConstants.LEFT);					lbl_AboutTeam.setFont(new Font("Garamond", Font.BOLD, 20));					/* Team Member labels */					lbl_AboutTeamMembers = new GUILabel("Pantech Solutions, Chennai", SwingConstants.LEFT);				pnl_AboutNorthInner.add(lbl_AboutTeam);				pnl_AboutNorthInner.add(lbl_AboutTeamMembers);				pnl_AboutNorthInner.add(Box.createVerticalStrut(30));			pnl_AboutNorth.add(Box.createHorizontalStrut(10));			pnl_AboutNorth.add(pnl_AboutNorthInner);			/* Center panel */			pnl_AboutCenter = new GUIPanel();			pnl_AboutCenter.setLayout(new BoxLayout(pnl_AboutCenter, BoxLayout.X_AXIS));			pnl_AboutCenter.setPreferredSize(new Dimension(300,125));				/* Eye Picture panel */				pnl_AboutEye = new GUIPanel();				pnl_AboutEye.setLayout(new BoxLayout(pnl_AboutEye, BoxLayout.Y_AXIS));					/* About Eye Picture label */					lbl_AboutEye = new GUILabel(new ImageIcon("../AboutEye.jpg"));				pnl_AboutEye.add(Box.createVerticalStrut(10));				pnl_AboutEye.add(lbl_AboutEye);				pnl_AboutEye.add(Box.createVerticalStrut(10));				/* About Info panel */				pnl_AboutInfo = new GUIPanel();				pnl_AboutInfo.setLayout(new BoxLayout(pnl_AboutInfo, BoxLayout.Y_AXIS));					/* Info text area */					jta_AboutInfo = new JTextArea("	");	        		jta_AboutInfo.setLineWrap(true);	        		jta_AboutInfo.setWrapStyleWord(true);	          		jta_AboutInfo.setFont(new Font("Garamond", Font.BOLD, 14));	          		jta_AboutInfo.setBackground(Constants.CLR_DEFAULT_BACKGROUND);	          		jta_AboutInfo.setEditable(false);				pnl_AboutInfo.add(Box.createVerticalStrut(10));				pnl_AboutInfo.add(jta_AboutInfo);				pnl_AboutInfo.add(Box.createVerticalStrut(5));          	pnl_AboutCenter.add(Box.createHorizontalStrut(10));			pnl_AboutCenter.add(pnl_AboutEye);			pnl_AboutCenter.add(Box.createHorizontalStrut(10));			pnl_AboutCenter.add(pnl_AboutInfo);			pnl_AboutCenter.add(Box.createHorizontalStrut(10));			/* South panel */			pnl_AboutSouth = new GUIPanel();			pnl_AboutSouth.setLayout(new FlowLayout(FlowLayout.CENTER));			pnl_AboutSouth.setPreferredSize(new Dimension(300,40));				/* Okay button */				btn_AboutOkay = new JButton("Okay");				btn_AboutOkay.addActionListener(new ActionListener()												{													public void actionPerformed(ActionEvent e)													{														dlg_About.setVisible(false);													}												});			pnl_AboutSouth.add(btn_AboutOkay);		dlg_About.getContentPane().add(pnl_AboutNorth, BorderLayout.NORTH);		dlg_About.getContentPane().add(pnl_AboutCenter, BorderLayout.CENTER);		dlg_About.getContentPane().add(pnl_AboutSouth, BorderLayout.SOUTH);	}	/**	 * Create the dialog to display the current contents of the agent's memory.	 */	protected void createMemoryDialog()	{		/* About window */		dlg_Memory = new JDialog(this, "My Memory", true);		dlg_Memory.getContentPane().setLayout(new BorderLayout());		dlg_Memory.setSize(new Dimension(300,400));		dlg_Memory.setLocationRelativeTo(this);		dlg_Memory.setVisible(false);			/* North panel */			pnl_MemoryNorth = new GUIPanel();			pnl_MemoryNorth.setLayout(new BoxLayout(pnl_MemoryNorth, BoxLayout.Y_AXIS));				/* Memory Statistics Panel */				pnl_MemoryStat = new GUIPanel();				pnl_MemoryStat.setLayout(new BoxLayout(pnl_MemoryStat, BoxLayout.X_AXIS));					/* Memory Statistic Label */					lbl_MemoryStat = new GUILabel("", SwingConstants.LEFT);	          		lbl_MemoryStat.setFont(new Font("Garamond", Font.BOLD, 18));				pnl_MemoryStat.add(Box.createHorizontalStrut(Constants.INT_SMALL_GAP));				pnl_MemoryStat.add(lbl_MemoryStat);				pnl_MemoryStat.add(Box.createHorizontalStrut(Constants.INT_SMALL_GAP));			pnl_MemoryNorth.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));			pnl_MemoryNorth.add(pnl_MemoryStat, BorderLayout.CENTER);			pnl_MemoryNorth.add(Box.createVerticalStrut(Constants.INT_SMALL_GAP));			/* Center panel */			pnl_MemoryCenter = new GUIPanel();			pnl_MemoryCenter.setLayout(new BorderLayout());				/* Memory Panel */				pnl_Memory = new GUIPanel();				pnl_Memory.setLayout(new BoxLayout(pnl_Memory, BoxLayout.X_AXIS));					/* Memory List */					jta_Memory = new JTextArea();					jta_Memory.setLineWrap(true);	          		jta_Memory.setMargin(new Insets(3, 3, 3, 3));	          		jta_Memory.setFont(new Font("Courier", Font.BOLD, 16));	          		jta_Memory.setBackground(Constants.CLR_DEFAULT_BACKGROUND);					jta_Memory.setEditable(false);	          	pnl_Memory.add(Box.createHorizontalStrut(Constants.INT_SMALL_GAP));				pnl_Memory.add(jta_Memory);				pnl_Memory.add(Box.createHorizontalStrut(Constants.INT_SMALL_GAP));			pnl_MemoryCenter.add(pnl_Memory, BorderLayout.CENTER);			/* South panel */			pnl_MemorySouth = new GUIPanel();				/* Okay button */				btn_MemoryOkay = new JButton("Okay");				btn_MemoryOkay.addActionListener(new ActionListener()												{													public void actionPerformed(ActionEvent e)													{														dlg_Memory.setVisible(false);													}												});	        pnl_MemorySouth.add(btn_MemoryOkay);		dlg_Memory.getContentPane().add(pnl_MemoryNorth, BorderLayout.NORTH);		dlg_Memory.getContentPane().add(pnl_MemoryCenter, BorderLayout.CENTER);		dlg_Memory.getContentPane().add(pnl_MemorySouth, BorderLayout.SOUTH);	}	/**	 * Display the memory dialog and add all of the current identities in the	 * agent's memory into the dialog.	 */	protected void viewMemory()	{		Vector mem = this.model.getAgent().getMemory();		lbl_MemoryStat.setText("Known Identities: " + mem.size());		jta_Memory.setText("");		for(int a = 0; a < mem.size(); a++)		{			jta_Memory.append("- " + ((Identity)mem.get(a)).getIdentityName() + "\n");		}		dlg_Memory.setVisible(true);	}	/**	 * Initiates the scanning of an eye action by allowing the user to choose	 * an image from the local disk structure. The image is then sent to the agent	 * for processing.	 */	protected void scanEye()	{		String name = "";		//Show file chooser so the user can select a file		if( fch_fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)		{			clear();			//Ensure that the name is provided			while(name == null || name.length() == 0)			{				//Display input dialog to have user input the name of the subject being scanned				name = JOptionPane.showInputDialog(this, "Name of subject:\n", "Subject Name", JOptionPane.QUESTION_MESSAGE);				if(name != null && name.length() > 0)				{					//Have the model scan the eye					model.scanEye(name, fch_fileChooser.getSelectedFile().getPath());					//Redraw the images of the scanning process in the user interface					redrawSubject();				}				else				{					if(name != null)						JOptionPane.showMessageDialog(this, "Subject name missing");				}			}		}		else			clear();	}	/**	 * Rescans the eye using the current global variables. This is similar to the	 * scanEye method but the subject used is the current subject.	 */	public void rescanEye()	{		//If the current subject is not null		if(model.getAgent().getCurrentSubject() != null)		{			//Rescan the subject's eye			model.rescanEye();			//Redraw the images of the scanning process in the user interface			redrawSubject();		}	}	/**	 * Redraws the images from each of the processes in the scan in each of the	 * appropriate image panels.	 */	public void redrawSubject()	{		/* Original image panel */		pnl_OriginalImage.setImage(model.getOriginalImage());		/* Grayscale image panel */		pnl_GrayscaleImage.setImage(model.getGrayscaleImage());		/* Grayscale median filter image */		pnl_GrayscaleMedianFilterImage.setImage(model.getMedianFilterImage());		/* Grayscale median filter image with center panel */		pnl_GrayscaleMedianFilterImageWithCenter.setImage(model.getGrayscaleImage());		pnl_GrayscaleMedianFilterImageWithCenter.drawCenter(model.getSubjectPupilCenter());		pnl_GrayscaleMedianFilterImageWithCenter.drawPupilRadius(model.getSubjectPupilRadius());		/* Edge Detection panel */		pnl_EdgeImage.setImage(model.getEdgeImage());		pnl_EdgeImage.drawCenter(model.getSubjectPupilCenter());		pnl_EdgeImage.drawPupilRadius(model.getSubjectPupilRadius());		/* Edge Image With Radii */		pnl_EdgeImageWithRadii.setImage(model.getEdgeImage());		pnl_EdgeImageWithRadii.drawCenter(model.getSubjectPupilCenter());		pnl_EdgeImageWithRadii.drawPupilRadius(model.getSubjectPupilRadius());		pnl_EdgeImageWithRadii.drawIrisRadius(model.getSubjectIrisRadius());		/* Grayscale iris only */		pnl_GrayscaleIrisOnly.setImage(model.getOriginalImage());		pnl_GrayscaleIrisOnly.drawCenter(model.getSubjectPupilCenter());		pnl_GrayscaleIrisOnly.drawPupilRadius(model.getSubjectPupilRadius());		pnl_GrayscaleIrisOnly.drawIrisRadius(model.getSubjectIrisRadius());		pnl_GrayscaleIrisOnly.drawLocalization();		/* Unwrapped Iris Panel */		if(model.getUnwrappedImage() != null)		{			pnl_UnwrappedIris.setImage(model.getUnwrappedImage());		}	}	/**	 * Performs the matching operation by instructing the model to match the	 * eye specified by the user from the file chooser dialog.	 */	protected void matchAgaintMemory()	{		if( fch_fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)		{			clear();            String Result=this.model.matchEye(fch_fileChooser.getSelectedFile().getPath());			//JOptionPane.showMessageDialog(this, this.model.matchEye(fch_fileChooser.getSelectedFile().getPath()) + "'");			JOptionPane.showMessageDialog(this, Result+ "'");            if(Result.equals("No Matching!!"))            {			String url = "www.google.com";            }            else            String url = "www.yahoo.com";            String cmd = null;            String WIN_PATH = "rundll32";            String WIN_FLAG = "url.dll,FileProtocolHandler";            try {                  cmd = WIN_PATH + " " + WIN_FLAG + " " + url;                  Process p = Runtime.getRuntime().exec(cmd);                }            catch(Exception e){ System.out.println(e); }		}		else			clear();	}	/**	 * Loads memory from the specified file into the agent.	 */	protected void loadAgent()	{       	if( fch_agentFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)		{			Agent a = new Agent(this, Functions.deserializeAgent(fch_agentFileChooser.getSelectedFile()));			this.model.setAgent(a);		}	} 	/** 	 * Saves the memory of the agent to the specified file 	 */	protected void saveAgent()	{		if( fch_agentFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)		{		    File test = fch_agentFileChooser.getSelectedFile();		    if (test.exists()) {		    int res=JOptionPane.showConfirmDialog(new JFrame(), "File Already Exists,Do you want in same name?", "File",JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);		   if(res==1)				{			   saveAgent();				}				else{				Functions.serializeAgent(fch_agentFileChooser.getSelectedFile(), this.model.getAgent());				}		    } else		    {			Functions.serializeAgent(fch_agentFileChooser.getSelectedFile(), this.model.getAgent());		     }        }	}	/**	 * Clears the images in the image panels to nothing.	 */	protected void clear()	{		pnl_OriginalImage.setImage(null);		pnl_GrayscaleImage.setImage(null);		pnl_GrayscaleMedianFilterImage.setImage(null);		pnl_GrayscaleMedianFilterImageWithCenter.setImage(null);		pnl_EdgeImage.setImage(null);		pnl_EdgeImageWithRadii.setImage(null);		pnl_GrayscaleIrisOnly.setImage(null);		pnl_UnwrappedIris.setImage(null);	}	/**	 * Closes the user interface.	 */	protected void close()	{		System.exit(1);	}}