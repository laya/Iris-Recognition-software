<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                      "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<!--
This file is in the xml docbook format. It can be translated to many formats
(including HTML) using the stylesheets available at: http://docbook.sourceforge.net.

If you have a good libxslt installation, you may use the following command to
translate this file to html:
xsltproc -o python.html http://docbook.sourceforge.net/release/xsl/current/html/docbook.xsl python.xml
-->

<article>
    <articleinfo>
      <author>
	<honorific>Ir</honorific>
	<firstname>Olivier</firstname>
	<surname>Samyn</surname>
	<email>osamyn@ulb.ac.be</email>
      </author>
      <date>February 2003</date>
      <revhistory>
	<revision>
	  <revnumber>0.7</revnumber>
	  <date>July 2010</date>
	  <revremark>Updated documentation of the sound API.</revremark>
	</revision>
      </revhistory>
    </articleinfo>
    <title>Python wrapper for Gcompris</title>


    <sect1>
      <title>Notes about this wrapper</title>
<para>Generaly speaking, all C gc_xxx functions are wrapped to a
corresponding gcompris.xxx function; parameters and return types remains the same.
Some structures have also been wrapped. See below particular notes about this.</para>

<para>The wrapped functions are divided into packages. Every package correponds to a
gcompris header file (gameutil.h, score.h, ...)</para>

<para>For each package/header not all functions have been wrapped.
Only functions that are used/usefull for plugins are wrapped.</para>

<para>Notice also that not all functions have been tested (with time and new python
plugins implemented they will be, but...). The wrappers have been written, they compiles,
but there is no warranty on their behaviour... I you find a bug report it!</para>
    </sect1>

    <sect1>
      <title>Python board structure</title>
<para>Each board written in python must contains a class which name is
"Gcompris_xxx" where xxx is the name of the board. Let's take an example: I made
a gcompris board written in python and called "pythontest".</para>
<para>For this board there is a gcompris pythontest.xml file containing
"pythontest" for the board name and "pythonboard" for the board type. There's
also a pythontest.py file containing the board code. And to finish, this file
contains a "Gcompris_pythontest" class definition which in turns contains the
needed gcompris board functions.</para>
<para>The class defined in the python board must contains the following methods:<itemizedlist>
	  <listitem>__init__(self, gcomprisBoard)</listitem>
	  <listitem>start(self)</listitem>
	  <listitem>end(self)</listitem>
	  <listitem>ok(self)</listitem>
	  <listitem>repeat(self)</listitem>
	  <listitem>config(self)</listitem>
	  <listitem>key_press(self, keyval)</listitem>
	  <listitem>pause(self, pause)</listitem>
	  <listitem>set_level(self, level)</listitem>
	</itemizedlist>
</para>
<para>For the method role and use, please consult the sample pythontest.py board
and other C boards.</para>
    </sect1>

    <sect1>
      <title>GcomprisBoard structure mapping </title>
<para>An instance of this structure in Python will act like an instance of the C
one. Here a some Python call samples:</para>
<programlisting>
...
  gcomprisBoard.level = 1
  gcomprisBoard.maxlevel = 1
...
  gcompris.bar_start(gcomprisBoard.canvas)
...
</programlisting>
<para>Here are the Python structure member name and type, and a note indicating if the
attribute is readeable and/or writable.</para>

      <informaltable>
	<tgroup cols="4">
	  <thead>
	    <row>
	      <entry>Structure member</entry>
	      <entry>Type</entry>
	      <entry>Readable</entry>
	      <entry>Writable</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>type</entry><entry>string</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>board_ready</entry><entry>boolean</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>mode</entry><entry>string</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>name</entry><entry>string</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>title</entry><entry>string</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>description</entry><entry>string</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>icon_name</entry><entry>string</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>author</entry><entry>string</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>boarddir</entry><entry>string</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>filename</entry><entry>string</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>difficulty</entry><entry>string</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>mandatory_sound_file</entry><entry>string</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>section</entry><entry>string</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>menuposotion</entry><entry>string</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>prerequisite</entry><entry>string</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>goal</entry><entry>string</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>manual</entry><entry>string</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>credit</entry><entry>string</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>width</entry><entry>int</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>height</entry><entry>int</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>canvas</entry><entry>gnome.canvas.Canvas</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>previous_board</entry><entry>GcomprisBoard</entry><entry>Y</entry><entry>N</entry>
	    </row><row>
	      <entry>level</entry><entry>int</entry><entry>Y</entry><entry>Y</entry>
	    </row><row>
	      <entry>maxlevel</entry><entry>int</entry><entry>Y</entry><entry>Y</entry>
	    </row><row>
	      <entry>sublevel</entry><entry>int</entry><entry>Y</entry><entry>Y</entry>
	    </row><row>
	      <entry>number_of_sublevel</entry><entry>int</entry><entry>Y</entry><entry>Y</entry>
	    </row>
	  </tbody>
	</tgroup>
      </informaltable>
    </sect1>



    <sect1>
      <title>gcompris.h functions and constants Mapping</title>
      <sect2>
	<title>Functions mapping</title>
	<informaltable>
	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>Python function</entry>
		<entry>C equivalent</entry>
		<entry>Notes</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>gcompris.end_board()</entry>
		<entry>void gc_board_end(void)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.bar_start(gnomeCanvas)</entry>
		<entry>void gc_bar_start(GnomeCanvas *theCanvas)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.set_background(gnomeCanvasGroup, file)</entry>
		<entry>GnomeCanvasItem *gc_set_background(GnomeCanvasGroup *parent, gchar *file)</entry>
		<entry>return a gnome.canvas.CanvasItem object</entry>
	      </row>
	      <row>
		<entry>gcompris.bar_set_level(gcomprisBoard)</entry>
		<entry>void gc_bar_set_level(GcomprisBoard *gcomprisBoard)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.bar_set_repeat_icon(pixmap)</entry>
		<entry>void gc_bar_set_repeat_icon(GdkPixbuf *pixmap)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.bar_set(flags)</entry>
		<entry>void gc_bar_set(const GComprisBarFlags flags)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.bar_hide(hide)</entry>
		<entry>void gc_bar_hide(gboolean hide)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.get_canvas()</entry>
		<entry>GnomeCanvas* gc_get_canvas()</entry>
		<entry>return a gnome.canvas.Canvas</entry>
	      </row>
	      <row>
		<entry>gcompris.get_window()</entry>
		<entry>GtkWidget* gc_get_window(void)</entry>
		<entry>return a gtk.Widget</entry>
	      </row>
	      <row>
		<entry>gcompris.get_locale()</entry>
		<entry>gchar* gc_locale_get(void)</entry>
		<entry>return a string</entry>
	      </row>
	      <row>
		<entry>gcompris.get_locale_name(locale)</entry>
		<entry>gchar* gc_locale_get_name(gchar *locale)</entry>
		<entry>returns the language name for the given locale (e.g French)</entry>
	      </row>
	      <row>
		<entry>gcompris.set_locale(locale)</entry>
		<entry>void gc_locale_set(gchar *locale)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.set_cursor(cursor_type)</entry>
		<entry>void gc_cursor_set(guint gdk_cursor_type)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.images_selector_start(gcomprisBoard, dataset, callback)</entry>
		<entry>void gc_selector_images_start (GcomprisBoard *gcomprisBoard, gchar *dataset, ImageSelectorCallBack imscb)</entry>
		<entry>The callback must be a callable object</entry>
	      </row>
	      <row>
		<entry>gcompris.images_selector_stop()</entry>
		<entry>void gc_selector_images_stop(void)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.exit()</entry>
		<entry>void gc_exit(void)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.log_set_reason (gcomprisBoard, expected, got)</entry>
		<entry>gc_log_set_reason (GcomprisBoard *gcomprisBoard, gchar *expected, gchar *got)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.log_end (gcomprisBoard, status)</entry>
		<entry>gc_log_end (GcomprisBoard *gcomprisBoard, gchar *status)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.file_selector_load(gcomprisBoard, rootdir, file_types, callback)</entry>
		<entry>void gc_selector_file_load (GcomprisBoard *gcomprisBoard, gchar *rootdir, gchar *file_types, FileSelectorCallBack fscb)</entry>
		<entry>The callback must be a callable object</entry>
	      </row>
	      <row>
		<entry>gcompris.file_selector_save(gcomprisBoard, rootdir, file_types, callback)</entry>
		<entry>void gc_selector_file_save(GcomprisBoard *gcomprisBoard, gchar *rootdir,gchar *file_types, FileSelectorCallBack fscb)</entry>
		<entry>The callback must be a callable object</entry>
	      </row>
	      <row>
		<entry>gcompris.file_selector_stop()</entry>
		<entry>void gc_selector_file_stop(void)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.get_database()</entry>
		<entry>gchar* gc_db_get_filename(void)</entry>
		<entry>return the filename (string) of the database (fullpath)</entry>
	      </row>
	      <row>
		<entry>gcompris.get_wordlist()</entry>
		<entry>GcomprisWordlist* gc_wordlist_get_from_file(const gchar *fileformat, ...)</entry>
		<entry>Return a WordList object loaded from the given file. It can be loaded with "wordsgame/default-$LOCALE.xml"</entry>
	      </row>
	      <row>
		<entry>gcompris.get_random_word(wordlist, level)</entry>
		<entry>gchar* gc_wordlist_random_word_get(GcomprisWordlist *wordlist, guint level)</entry>
		<entry>Return a random word from the previously loaded wordlist object and the specified level.</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>
      <sect2>
	<title>GComprisBarFlags enum mapping</title>
	<informaltable>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Python constant</entry>
		<entry>C equivalent</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>gcompris.BAR_LEVEL</entry>
		<entry>GCOMPRIS_BAR_LEVEL</entry>
	      </row>
	      <row>
		<entry>gcompris.BAR_REPEAT</entry>
		<entry>GCOMPRIS_BAR_REPEAT</entry>
	      </row>
	      <row>
		<entry>gcompris.BAR_REPEAT_ICON</entry>
		<entry>GCOMPRIS_BAR_REPEAT_ICON</entry>
	      </row>
	      <row>
		<entry>gcompris.BAR_CONFIG</entry>
		<entry>GCOMPRIS_BAR_CONFIG</entry>
	      </row>
	      <row>
		<entry>gcompris.BAR_ABOUT</entry>
		<entry>GCOMPRIS_BAR_ABOUT</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>

      <sect2>
	<title>Misc constants mapping</title>
	<informaltable>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Python constant</entry>
		<entry>C equivalent</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row><entry>gcompris.BOARD_HEIGHT</entry>
		<entry>BOARDHEIGHT</entry></row>
	      <row><entry>gcompris.BOARD_WIDTH</entry>
		<entry>BOARDWIDTH</entry></row>
	      <row><entry>gcompris.BAR_HEIGHT</entry>
		<entry>BAR_HEIGHT</entry></row>
	      <row><entry>gcompris.DEFAULT_SKIN</entry>
		<entry>DEFAULT_SKIN</entry></row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>

      <sect2>
	<title>Colors constants mapping</title>
	<informaltable>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Python constant</entry>
		<entry>C equivalent</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row><entry>gcompris.COLOR_TITLE</entry><entry>COLOR_TITLE</entry></row>
	      <row><entry>gcompris.COLOR_TEXT_BUTTON</entry><entry>COLOR_TEXT_BUTTON</entry></row>
	      <row><entry>gcompris.COLOR_CONTENT</entry><entry>COLOR_CONTENT</entry></row>
	      <row><entry>gcompris.COLOR_SUBTITLE</entry><entry>COLOR_SUBTITLE</entry></row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>

      <sect2>
	<title>Fonts constants mapping</title>
	<informaltable>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Python constant</entry>
		<entry>C equivalent</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row><entry>gcompris.FONT_TITLE</entry><entry>FONT_TITLE</entry></row>
	      <row><entry>gcompris.FONT_TITLE_FALLBACK</entry><entry>FONT_TITLE_FALLBACK</entry></row>
	      <row><entry>gcompris.FONT_SUBTITLE</entry><entry>FONT_SUBTITLE</entry></row>
	      <row><entry>gcompris.FONT_SUBTITLE_FALLBACK</entry><entry>FONT_SUBTITLE_FALLBACK</entry></row>
	      <row><entry>gcompris.FONT_CONTENT</entry><entry>FONT_CONTENT</entry></row>
	      <row><entry>gcompris.FONT_CONTENT_FALLBACK</entry><entry>FONT_CONTENT_FALLBACK</entry></row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>

      <sect2>
	<title>Board font constants mapping</title>
	<informaltable>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Python constant</entry>
		<entry>C equivalent</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row><entry>gcompris.FONT_BOARD_TINY</entry><entry>FONT_BOARD_TINY</entry></row>
	      <row><entry>gcompris.FONT_BOARD_SMALL</entry><entry>FONT_BOARD_SMALL</entry></row>
	      <row><entry>gcompris.FONT_BOARD_MEDIUM</entry><entry>FONT_BOARD_MEDIUM</entry></row>
	      <row><entry>gcompris.FONT_BOARD_BIG</entry><entry>FONT_BOARD_BIG</entry></row>
	      <row><entry>gcompris.FONT_BOARD_BIG_BOLD</entry><entry>FONT_BOARD_BIG_BOLD</entry></row>
	      <row><entry>gcompris.FONT_BOARD_FIXED</entry><entry>FONT_BOARD_FIXED</entry></row>
	      <row><entry>gcompris.FONT_BOARD_TITLE</entry><entry>FONT_BOARD_TITLE</entry></row>
	      <row><entry>gcompris.FONT_BOARD_TITLE_BOLD</entry><entry>FONT_BOARD_TITLE_BOLD</entry></row>
	      <row><entry>gcompris.FONT_BOARD_HUGE</entry><entry>FONT_BOARD_HUGE</entry></row>
	      <row><entry>gcompris.FONT_BOARD_HUGE_BOLD</entry><entry>FONT_BOARD_HUGE_BOLD</entry></row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>

      <sect2>
	<title>Cursor constants mapping</title>
	<informaltable>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Python constant</entry>
		<entry>C equivalent</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row><entry>gcompris.CURSOR_FIRST_CUSTOM</entry>
		<entry>GCOMPRIS_FIRST_CUSTOM_CURSOR</entry></row>
	      <row><entry>gcompris.CURSOR_LINE</entry><entry>GCOMPRIS_LINE_CURSOR</entry></row>
	      <row><entry>gcompris.CURSOR_FILLRECT</entry><entry>GCOMPRIS_FILLRECT_CURSOR</entry></row>
	      <row><entry>gcompris.CURSOR_RECT</entry><entry>GCOMPRIS_RECT_CURSOR</entry></row>
	      <row><entry>gcompris.CURSOR_FILLCIRCLE</entry><entry>GCOMPRIS_FILLCIRCLE_CURSOR</entry></row>
	      <row><entry>gcompris.CURSOR_CIRCLE</entry><entry>GCOMPRIS_CIRCLE_CURSOR</entry></row>
	      <row><entry>gcompris.CURSOR_DEL</entry><entry>GCOMPRIS_DEL_CURSOR</entry></row>
	      <row><entry>gcompris.CURSOR_FILL</entry><entry>GCOMPRIS_FILL_CURSOR</entry></row>
	      <row><entry>gcompris.CURSOR_SELECT</entry><entry>GCOMPRIS_SELECT_CURSOR</entry></row>
	      <row><entry>gcompris.CURSOR_DEFAULT</entry><entry>GCOMPRIS_DEFAULT_CURSOR</entry></row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>

    </sect1>

    <sect1>
      <title>gameutil.h functions and constants Mapping</title>
      <sect2>
	<title>Functions mapping</title>
	<informaltable>
	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>Python function</entry>
		<entry>C equivalent</entry>
		<entry>Notes</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>gcompris.utils.image_to_skin(imagename)</entry>
		<entry>gchar *gc_skin_image_get(gchar *imagename)</entry>
		<entry>return a string</entry>
	      </row>
	      <row>
		<entry>gcompris.skin.load_pixmap(pixmapfile)</entry>
		<entry>GdkPixbuf *gc_skin_pixmap_load(char *pixmapfile)</entry>
		<entry>return a gtk.gdk.Pixbuf</entry>
	      </row>
	      <row>
		<entry>gcompris.utils.load_pixmap(pixmapfile)</entry>
		<entry>GdkPixbuf *gc_pixmap_load(char *pixmapfile)</entry>
		<entry>return a gtk.gdk.Pixbuf</entry>
	      </row>
	      <row>
		<entry>gcompris.utils.find_file_absolute(file)</entry>
		<entry>char *gc_file_find_absolute(char *file)</entry>
		<entry>return a string</entry>
	      </row>
	      <row>
		<entry>gcompris.utils.set_image_focus(item, focus)</entry>
		<entry>void gc_item_focus_set(GnomeCanvasItem *item, gboolean focus)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.utils.item_event_focus(item, event, dest_item)</entry>
		<entry>gint gc_item_focus_event(GnomeCanvasItem *item, GdkEvent *event, GnomeCanvasItem *dest_item)</entry>
		<entry>return an integer</entry>
	      </row>
	      <row>
		<entry>gcompris.utils.item_absolute_move(item, x, y)</entry>
		<entry>void gc_item_absolute_move(GnomeCanvasItem *item, int x, int y)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.utils.item_rotate(item, angle)</entry>
		<entry>void gc_item_rotate(GnomeCanvasItem *item, double angle)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.utils.item_rotate_relative(item, angle)</entry>
		<entry>void gc_item_rotate_relative(GnomeCanvasItem *item, double angle)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.utils.item_rotate_with_center(item, angle, x, y)</entry>
		<entry>void gc_item_rotate_with_center(GnomeCanvasItem *item, double angle, int x, int y)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.utils.item_rotate_relative_with_center(item, angle, x, y)</entry>
		<entry>void gc_item_rotate_relative_with_center(GnomeCanvasItem *item, double angle, int x, int y)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.utils.dialog(str, callback)</entry>
		<entry>void gc_dialog(gchar *str, DialogBoxCallBack callback)</entry>
		<entry>The callback must be a callable object</entry>
	      </row>
	      <row>
		<entry>gcompris.utils.dialog_close()</entry>
		<entry>void gc_dialog_close()</entry>
		<entry></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>


      <sect2>
	<title>Constants mapping</title>
        <para>
          There is no constants in this package.
        </para>
      </sect2>
    </sect1>

    <sect1>
      <title>bonus.h functions and constants Mapping</title>
      <sect2>
	<title>Functions mapping</title>
	<informaltable>
	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>Python function</entry>
		<entry>C equivalent</entry>
		<entry>Notes</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>gcompris.bonus.display(BonusStatusList, BonusList)</entry>
		<entry>void gc_bonus_display(BonusStatusList, BonusList)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.bonus.board_finished(BoardFinishedList)</entry>
		<entry>void gc_bonus_end_display(BoardFinishedList)</entry>
		<entry></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>


      <sect2>
	<title>Constants mapping (BonusStatusList)</title>
	<informaltable>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Python constant</entry>
		<entry>C equivalent</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row><entry>gcompris.bonus.LOOSE</entry>
		<entry>BOARD_LOOSE</entry></row>
	      <row><entry>gcompris.bonus.WIN</entry>
		<entry>BOARD_WIN</entry></row>
	      <row><entry>gcompris.bonus.DRAW</entry>
		<entry>BOARD_DRAW</entry></row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>

      <sect2>
	<title>Constants mapping (BonusList)</title>
	<informaltable>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Python constant</entry>
		<entry>C equivalent</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row><entry>gcompris.bonus.TIME_CLICK_TO</entry>
		<entry>TIME_CLICK_TO_BONUS</entry></row>
	      <row><entry>gcompris.bonus.RANDOM</entry>
		<entry>BONUS_RANDOM</entry></row>
	      <row><entry>gcompris.bonus.SMILEY</entry>
		<entry>BONUS_SMILEY</entry></row>
	      <row><entry>gcompris.bonus.FLOWER</entry>
		<entry>BONUS_FLOWER</entry></row>
	      <row><entry>gcompris.bonus.TUX</entry>
		<entry>BONUS_TUX</entry></row>
	      <row><entry>gcompris.bonus.GNU</entry>
		<entry>BONUS_TUX</entry></row>
	      <row><entry>gcompris.bonus.LION</entry>
		<entry>BONUS_LION</entry></row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>

      <sect2>
	<title>Constants mapping (BoardFinishedList)</title>
	<informaltable>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Python constant</entry>
		<entry>C equivalent</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row><entry>gcompris.bonus.FINISHED_RANDOM</entry>
		<entry>BOARD_FINISHED_RANDOM</entry></row>
	      <row><entry>gcompris.bonus.FINISHED_TUXPLANE</entry>
		<entry>BOARD_FINISHED_TUXPLANE</entry></row>
	      <row><entry>gcompris.bonus.FINISHED_TUXLOCO</entry>
		<entry>BOARD_FINISHED_TUXLOCO</entry></row>
	      <row><entry>gcompris.bonus.FINISHED_TOOMANYERRORS</entry>
		<entry>BOARD_FINISHED_TOOMANYERRORS</entry></row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>
    </sect1>

    <sect1>
      <title>score.h functions and constants Mapping</title>
      <sect2>
	<title>Functions mapping</title>
	<informaltable>
	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>Python function</entry>
		<entry>C equivalent</entry>
		<entry>Notes</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>gcompris.score.start(style, x, y, max)</entry>
		<entry>void gc_score_start(ScoreStyleList style, guint x, guint y, guint max)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.score.end()</entry>
		<entry>void gc_score_end()</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.score.set(value)</entry>
		<entry>void gc_score_set(guint value)</entry>
		<entry></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>


      <sect2>
	<title>Constants mapping</title>
	<informaltable>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Python constant</entry>
		<entry>C equivalent</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row><entry>gcompris.score.STYLE_NOTE</entry>
		<entry>SCORESTYLE_NOTE</entry></row>
	      <row><entry>gcompris.score.STYLE_LIFE</entry>
		<entry>SCORESTYLE_LIFE</entry></row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>
    </sect1>

    <sect1>
      <title>soundutil.h functions and constants Mapping</title>
      <sect2>
	<title>Functions mapping</title>
	<informaltable>
	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>Python function</entry>
		<entry>C equivalent</entry>
		<entry>Notes</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>gcompris.sound.play_ogg_list(list)</entry>
		<entry>void gc_sound_play_ogg_list( GList* files )</entry>
		<entry>The list argument is a python list
		       <programlisting>
import gcompris.sound

sounds=["sounds/Harbor1.wav", "sounds/Harbor3.ogg"]
gcompris.sound.play_ogg(sounds)
		       </programlisting>
		</entry>
	      </row>
	      <row>
		<entry>gcompris.sound.play_ogg(file1, ...)</entry>
		<entry>void gc_sound_play_ogg(char *, ...)</entry>
		<entry>Play all the given files.
		       <programlisting>
import gcompris.sound

gcompris.sound.play_ogg("sounds/Harbor1.wav", "sounds/Harbor3.ogg")
		       </programlisting>
		</entry>
	      </row>

	      <row>
		<entry>gcompris.sound.play_ogg_cb(list, callback)</entry>
		<entry>void gc_sound_play_ogg_cb((const gchar *file, GcomprisSoundCallback cb)</entry>
		<entry>The list argument is a python string and a function callback. It will be called once the sound has been played.
		       <programlisting>
import gcompris.sound

gcompris.sound.play_ogg_cb("melody/into.ogg", self.intro_cb)

def intro_cb(self, file):
  print "intro passed. go play"
  self.pause(False)
		       </programlisting>
		</entry>
	      </row>

	      <row>
		<entry>gcompris.sound.policy_get()</entry>
		<entry>int gc_sound_policy_get()</entry>
		<entry>Returns the current sound policy.
		       <programlisting>
import gcompris.sound

self.saved_policy = gcompris.sound.policy_get()
		       </programlisting>
		</entry>
	      </row>

	      <row>
		<entry>gcompris.sound.policy_set(policy)</entry>
		<entry>void gc_sound_policy_set(int)</entry>
		<entry>Set the sound policy.
		       <programlisting>
import gcompris.sound

gcompris.sound.policy_set(gcompris.sound.PLAY_AND_INTERRUPT)
		       </programlisting>
		</entry>
	      </row>

	      <row>
		<entry>gcompris.sound.pause()</entry>
		<entry>void gc_sound_bg_pause()</entry>
		<entry>Pause the background music.
		       <programlisting>
import gcompris.sound

gcompris.sound.pause()
		       </programlisting>
		</entry>
	      </row>

	      <row>
		<entry>gcompris.sound.resume()</entry>
		<entry>void gc_sound_bg_resume()</entry>
		<entry>Resume the background music.
		       <programlisting>
import gcompris.sound

gcompris.sound.resume()
		       </programlisting>
		</entry>
	      </row>

	      <row>
		<entry>gcompris.sound.close()</entry>
		<entry>void gc_sound_close()</entry>
		<entry>Close the audio channel. This is usefull to start an external programm which may then access the audio device on the system.
		       <programlisting>
import gcompris.sound

gcompris.sound.close()
		       </programlisting>
		</entry>
	      </row>

	      <row>
		<entry>gcompris.sound.reopen()</entry>
		<entry>void gc_sound_reopen()</entry>
		<entry>Reopen the audio channel to be used by GCompris.
		       <programlisting>
import gcompris.sound

gcompris.sound.reopen()
		       </programlisting>
		</entry>
	      </row>

	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>


      <sect2>
	<title>Constants mapping</title>
	<informaltable>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Python constant</entry>
		<entry>C equivalent</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row><entry>gcompris.sound.PLAY_ONLY_IF_IDLE</entry>
		<entry>PLAY_ONLY_IF_IDLE (Discard play request if busy)</entry></row>
	      <row><entry>gcompris.sound.PLAY_AFTER_CURRENT</entry>
		<entry>PLAY_AFTER_CURRENT Default value, queue mode()</entry></row>
	      <row><entry>gcompris.sound.PLAY_AND_INTERRUPT</entry>
		<entry>PLAY_AND_INTERRUPT (Interrupt current play with the new one)</entry></row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>
    </sect1>

    <sect1>
      <title>timer.h functions and constants Mapping</title>
      <sect2>
	<title>Functions mapping</title>
	<informaltable>
	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>Python function</entry>
		<entry>C equivalent</entry>
		<entry>Notes</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>gcompris.timer.display(x, y, type, second, callback)</entry>
		<entry>void gcompris_timer_display (int x, int y, TimerList type, int second, GcomprisTimerEnd gcomprisTimerEnd);</entry>
		<entry>The callback must be a callable object</entry>
	      </row>
	      <row>
		<entry>gcompris.timer.add(second)</entry>
		<entry>void gc_timer_add(int second)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.timer.end()</entry>
		<entry>void gc_timer_end(void)</entry>
		<entry></entry>
	      </row>
	      <row>
		<entry>gcompris.timer.get_remaining()</entry>
		<entry>guint gc_timer_get_remaining()</entry>
		<entry>Return an integer</entry>
	      </row>
	      <row>
		<entry>gcompris.timer.pause(pause)</entry>
		<entry>void gc_timer_pause(gboolean pause)</entry>
		<entry></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>


      <sect2>
	<title>Constants mapping</title>
	<informaltable>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Python constant</entry>
		<entry>C equivalent</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row><entry>gcompris.timer.TEXT</entry>
		<entry>GCOMPRIS_TIMER_TEXT</entry></row>
	      <row><entry>gcompris.timer.SAND</entry>
		<entry>GCOMPRIS_TIMER_SAND</entry></row>
	      <row><entry>gcompris.timer.BALLOON</entry>
		<entry>GCOMPRIS_TIMER_BALLOON</entry></row>
	      <row><entry>gcompris.timer.CLOCK</entry>
		<entry>GCOMPRIS_TIMER_CLOCK</entry></row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>
    </sect1>

    <sect1>
      <title>anim.h structures Mapping</title>
      <para>The gcompris.anim module supplies two objects, Animation and CanvasItems, corresponding to GcomprisAnimation and GcomprisAnimCanvasItem respectively.</para>
      <sect2>
        <title>Animation</title>
        <para>The Animation object represents a set of animation files loaded into memory; it has no methods or members, only a constructor and a destructor. The constructor takes a single argument, the name of a text file containing a space-separated list of animation files. Each animation file in the text file corresponds to an animation state; the animations states are numbered from 0 to n-1.</para>
      </sect2>
      <sect2>
        <title>CanvasItem</title>
        <para>The CanvasItem object is a bit more interesting than the Animation object. It represents an active instance of an animation file. Its constructor takes two arguments, an Animation and a GnomeCanvasGroup (the parent of the desired active animation).</para>
        <sect3>
          <title>Members</title>
          <informaltable>
            <tgroup cols="4">
              <thead>
                <row>
                  <entry>Structure member</entry>
                  <entry>Type</entry>
                  <entry>Readable</entry>
                  <entry>Writable</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>gnome_canvas</entry>
                  <entry>gnome.canvas.CanvasPixbuf</entry>
                  <entry>Y</entry>
                  <entry>N</entry>
                </row>
                <row>
                  <entry>num_states</entry>
                  <entry>int</entry>
                  <entry>Y</entry>
                  <entry>N</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </sect3>
        <sect3>
        <title>Functions</title>
          <informaltable>
            <tgroup cols="3">
              <thead>
                <row>
                  <entry>Python function</entry>
                  <entry>C equivalent</entry>
                  <entry>Notes</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>gcompris.anim.CanvasItem.setState(int)</entry>
                  <entry>gc_anim_set_state(GcomprisAnimCanvasItem*, int)</entry>
                  <entry></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </sect3>
      </sect2>
    </sect1>

</article>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-default-dtd-file:"/usr/share/xml/docbook/xemacs/docbook-4.2"
End:
-->
